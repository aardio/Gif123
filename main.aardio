import config;
import uiLanguage;
import fonts.FontAwesomeGif123; 
import gifRecorder; 
import fsys;
import fsys.environment;
import win.region.hole;
import win.ui.atom;
import win.ui;
/*DSG{{*/
mainForm = win.form(text="Gif123 - 录屏工具";right=723;bottom=512;bgcolor=4752084;border="none")
mainForm.add(
btnCopy={cls="plus";text="复制";left=158;top=0;right=225;bottom=30;align="left";color=3947580;disabled=1;dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesomeGif123');padding={left=1;top=1}};iconText='\uF0EA';notify=1;textPadding={left=21};z=4};
btnExplore={cls="plus";text='\uF07C';left=389;top=2;right=421;bottom=32;color=3947580;dl=1;dt=1;font=LOGFONT(h=-15;name='FontAwesomeGif123');notify=1;z=12};
btnGifsicleHelp={cls="plus";text='\uF059';left=257;top=519;right=273;bottom=539;align="left";bgcolor=16777215;clipBk=false;color=3947580;db=1;dr=1;font=LOGFONT(h=-15;name='FontAwesomeGif123');notify=1;z=11};
btnMenu={cls="plus";text='\uF0D7';left=462;top=2;right=494;bottom=32;color=3947580;dl=1;dt=1;font=LOGFONT(h=-17;name='FontAwesomeGif123');hide=1;notify=1;z=16};
btnPause={cls="plus";text="暂停";left=5;top=0;right=67;bottom=30;align="left";color=3947580;dl=1;dt=1;font=LOGFONT(h=-13);hide=1;iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesomeGif123');padding={left=1;top=1}};iconText='\uF04C';notify=1;textPadding={left=21};z=15};
btnRecord={cls="plus";text="录制";left=5;top=0;right=80;bottom=30;align="left";color=3947580;dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesomeGif123');padding={left=1;top=1}};iconText='\uF111';notify=1;textPadding={left=21};z=3};
btnSettings={cls="plus";text='\uF013';left=426;top=2;right=458;bottom=32;color=3947580;dl=1;dt=1;font=LOGFONT(h=-17;name='FontAwesomeGif123');notify=1;z=13};
btnWebSite={cls="plus";text='\uF09B';left=462;top=2;right=494;bottom=32;color=3947580;dl=1;dt=1;font=LOGFONT(h=-17;name='FontAwesomeGif123');notify=1;z=14};
chkPreview={cls="plus";text="预览";left=79;top=0;right=157;bottom=30;align="left";dl=1;dt=1;font=LOGFONT(h=-14);iconStyle={align="left";font=LOGFONT(h=-14;name='FontAwesomeGif123');padding={left=1}};iconText='\uF03E';notify=1;textPadding={left=21};z=8};
editGifsicleArgs={cls="edit";left=251;top=516;right=531;bottom=540;align="right";db=1;dr=1;edge=1;hide=1;z=10};
lbFps={cls="plus";text="FPS：";left=227;top=7;right=265;bottom=24;align="right";color=7895160;dl=1;dt=1;notify=1;z=6};
lbFps2={cls="plus";text="12";left=361;top=7;right=385;bottom=24;align="left";color=7895160;dl=1;dt=1;notify=1;z=7};
plusPosition={cls="plus";text="Size: 100 x 100";left=532;top=515;right=663;bottom=540;align="left";bgcolor=4752084;clipBk=false;db=1;dr=1;forecolor=16777215;hide=1;iconStyle={align="left";font=LOGFONT(name='FontAwesomeGif123');padding={left=10;top=1}};iconText='\uF255';notify=1;paddingBottom=2;paddingLeft=2;paddingRight=2;paddingTop=2;textPadding={left=24};z=9};
plusPreview={cls="plus";left=2;top=32;right=722;bottom=512;bgcolor=4752084;clipBk=false;db=1;dl=1;dr=1;dt=1;foreRepeat="scale";notify=1;repeat="scale";z=2};
tbFps={cls="plus";left=267;top=9;right=358;bottom=22;bgcolor=-2512093;border={radius=-1};color=1995263;dl=1;dt=1;foreRight=13;forecolor=-14911489;paddingBottom=5;paddingTop=5;z=5};
titleBar={cls="bkplus";left=-6;top=-2;right=724;bottom=30;bgcolor=10789024;dl=1;dr=1;dt=1;forecolor=16777215;linearGradient=180;z=1}
)
/*}}*/

var atom,hwnd = mainForm.atom("DA909863-CBDD-4729-9E95-B1E46EB6E859.GIF123");
if(!atom) return win.setForeground(hwnd)

var holePreview = win.region.hole(mainForm.plusPreview);
 
var recorder = gifRecorder();
import mouse.highlighter;
mainForm.btnRecord.oncommand = function(id,event){
	mainForm.setCurrentPreviewImage(null);
	
	if(mainForm.btnRecord.recording == true){
		
		if(config.setting.chkHighlight){
			if(mainForm.mouseHighlighter){
				mainForm.mouseHighlighter.close();
				mainForm.mouseHighlighter = null;
			}
		}
	
		mainForm.btnRecord.disabled = true;
		recorder.stop();
		
		mainForm.btnRecord.disabledText = { '\uF254';'\uF251';'\uF252';'\uF253';'\uF250'}
		
		var outputFilename = config.setting.outputFilename;
		if(string.indexOf(outputFilename,"%")){
			outputFilename = tostring(time(),outputFilename)
		}
		
		config.setting.pathOutput = io.joinpath( fsys.environment.expand(config.setting.outputDir),outputFilename);
		fsys.copy(config.__pathRecording,config.setting.pathOutput);
		
		if(config.setting.chkOptimize){
			thread.invokeAndWait(
				function(pathOutput,gifsicleArgs){
					import process.gifsicle;
					gifsicleArgs = string.replace(gifsicleArgs,"--colors\s+0!\D","");
					var out = process.gifsicle.get(pathOutput,,gifsicleArgs);
				} ,config.setting.pathOutput,config.setting.gifsicleArgs3
			) 	
		}
		 
		mainForm.setCurrentPreviewImage(config.setting.pathOutput);
		io.remove(config.__pathRecording);
		
		mainForm.btnRecord.disabledText = null;
		mainForm.chkPreview.disabled = false;
		mainForm.btnCopy.disabled = false;
		mainForm.tbFps.disabled = false;
		mainForm.btnSettings.disabled = false; 
		mainForm.btnExplore.disabled = false; 
		mainForm.btnRecord.text = uiLanguage.record;
		mainForm.btnRecord.iconText = '\uF111';
		mainForm.btnRecord.recording = false;
		
		win.setForeground(mainForm.hwnd);
		return;
	}

	recorder.start();  
}

mainForm.onStartRecording = function(){
	mainForm.btnRecord.recording = true;
	mainForm.btnRecord.iconText = '\uF0C8';
	mainForm.btnRecord.text = uiLanguage.stop; 
	mainForm.chkPreview.disabled = true;
	mainForm.btnExplore.disabled = true; 
	mainForm.btnCopy.disabled = true;
	mainForm.tbFps.disabled = true; 
	mainForm.btnSettings.disabled = true; 
	win.setTopmost(mainForm.hwnd); 
	
	if(config.setting.chkHighlight){
		if(!mainForm.mouseHighlighter){
			mainForm.mouseHighlighter = mouse.highlighter(mainForm,config.setting.highlightColor
				,config.setting.highlightSize,config.setting.highlightPadding);
			mainForm.mouseHighlighter.show();	
		}
	} 	
}

mainForm.setCurrentPreviewImage = function(path){
	mainForm.plusPreview.$currentImagePath = path;
	if(path) {
		if(config.setting.pathOutput==path){
			fsys.copy(config.__pathRecording,config.__pathUnoptimizedPreview);
		}
		else {
			fsys.copy(path,config.__pathUnoptimizedPreview);
		}
		
		mainForm.plusPreview.frameDeleted = null;
		mainForm.plusPreview.origPreviewTimeline = null;
	}
}

mainForm.getCurrentImage = function(){
	if(mainForm.btnRecord.recording){
		mainForm.msgboxErr(uiLanguage.stopRecoding);
		return 
	}
	
	var path = mainForm.plusPreview.$currentImagePath; 
	if(!path) path = config.setting.pathOutput;
	
	if(!io.exist(path)){ 
		mainForm.msgboxErr(uiLanguage.notFound);
		return;
	}
	
	return path;	
} 

mainForm.plusPreview.animation = false;
mainForm.plusPreview.startPreview = function(){
	var bmp = mainForm.plusPreview.getForeground();
	if(!bmp) return;
	
	var delays = bmp.getFrameDelays();
	var previewTimeline =  {};
	var previewTimelineStr = {}
	var centisecond = 0;
	
	for(i=1;#delays;1){
		previewTimeline[i] = { b = centisecond; e = centisecond + delays[i]};
		centisecond = centisecond + delays[i];
		previewTimelineStr[i] = tostring( time(centisecond / 100,"%M:%S") );
	}
	
	mainForm.plusPreview.previewTimelineStr = previewTimelineStr;
	mainForm.plusPreview.previewTimeline = previewTimeline;
	if((!mainForm.plusPreview.origPreviewTimeline) || (!mainForm.plusPreview.frameDeleted)){
		mainForm.plusPreview.origPreviewTimeline = previewTimeline;
	}
	
	mainForm.lbFps.text = time(centisecond/100,"%M:%S"); 
	mainForm.tbFps.setTrackbarRange(1,#delays);
	bmp.createAnimation(mainForm.plusPreview,function(ctrl){
		mainForm.tbFps.progressPos = bmp.activeFrame;
		owner.redraw();
	});
	mainForm.tbFps.disabled = true;	 
}

import win.ui.menu;
import win.guid;
mainForm.plusPreview.onRightMouseUp = function(wParam,lParam){ 
	if(mainForm.chkPreview.disabled ) return;
    var x,y = win.getMessagePos(lParam);
    mainForm.plusPreview.showContextMenu(x+owner.left,y+owner.top);
}

mainForm.plusPreview.showContextMenu = function(x,y){
    if(mainForm.chkPreview.disabled) return;
     
    var path = mainForm.plusPreview.$currentImagePath; 
    if(!path) return;
    
	var menuFile = win.ui.popmenu(mainForm);
	menuFile.add(
		uiLanguage.copy  + '\tCtrl + C',
		function(id){
			mainForm.btnCopy.oncommand();
		} 
	) 
	
	menuFile.add(
		uiLanguage.copyPath,
		function(id){
			import win.clip;
			win.clip.write(path);
		} 
	) 
	menuFile.add();
	
	if(win.guid.fromString("Photoshop.Application")){
		menuFile.add(
			uiLanguage.ps,
			function(id){
				thread.invoke( 
					function(path){
						import com;
						var ps = com.GetOrCreateObject("Photoshop.Application");
						if(ps){
							ps.load(path);
							
							import process;
							var pid = process.findId("Photoshop\.exe");
							if(pid){
								var prcs = process(pid);
								var hwnd  = prcs.getMainWindow();
								if(hwnd){
									import win;
									win.setForeground(hwnd)
								}
							}
							
						}
					},path
				)
				
				mainForm.hitMin();
			} 
		) 
		menuFile.add();
	}
	var totalFrames = mainForm.plusPreview.getForeground().totalFrames;
	var playing = mainForm.plusPreview.getForeground().isPlaying(); 
	if(!playing && totalFrames > 1 ){ 
		var min,max = mainForm.tbFps.getProgressRange();
		var cur = mainForm.tbFps.progressPos;
	
		if(cur>1){
			menuFile.add(
				uiLanguage.prev + '\tWheel/Page Up',
				function(id){
					var bmp = mainForm.plusPreview.getForeground();
					if(bmp){
						if(bmp.activeFrame>0){
							bmp.selectActiveFrame(bmp.activeFrame-1);
							mainForm.tbFps.progressPos = bmp.activeFrame;
							mainForm.plusPreview.redraw();	
						}
						
					}
				} 
			)		
		}

 		if(cur<max){
			menuFile.add(
				uiLanguage.next + '\tWheel/Page Down',
				function(id){
					var bmp = mainForm.plusPreview.getForeground();
					if(bmp){
						if(bmp.activeFrame < bmp.totalFrames){
							bmp.selectActiveFrame(bmp.activeFrame+1);
							mainForm.tbFps.progressPos = bmp.activeFrame;
							mainForm.plusPreview.redraw();
						} 
					}
				} 
			) 	
		}
		
		if(max>1){
			var min,max = mainForm.tbFps.getProgressRange();
			var cur = mainForm.tbFps.progressPos;
					
			menuFile.add(
				uiLanguage.deleteFrame,
				function(id){ 
					var min,max = mainForm.tbFps.getProgressRange();
					var cur = mainForm.tbFps.progressPos;
					
					mainForm.plusPreview.previewTimeline[cur].deleted = true;
					mainForm.plusPreview.frameDeleted = true;
					
					mainForm.plusPosition.oncommand(); 
					mainForm.btnPause.oncommand(); 
					
					var min,max = mainForm.tbFps.getProgressRange();
					if(cur>max) cur = max;
					 
					mainForm.tbFps.progressPos = cur;
					mainForm.tbFps.onPosChanged( cur,true )
				} 
			) 	
		} 
		
		if(cur>1){
			menuFile.add(
				uiLanguage.deletePrevFrames,
				function(id){ 
					var min,max = mainForm.tbFps.getProgressRange();
					var cur = mainForm.tbFps.progressPos;
					 
					var frameDeleted = {totalFrames=max};
					for(frame=1;cur-1;1){
						mainForm.plusPreview.previewTimeline[frame].deleted = true;
					}
						
					mainForm.plusPreview.frameDeleted = true; 
					mainForm.plusPosition.oncommand();
					mainForm.btnPause.oncommand();
					
					mainForm.tbFps.progressPos = 1;
					mainForm.tbFps.onPosChanged( 1,true )
				} 
			) 		
		}
		
		if(cur<max){
			menuFile.add(
				uiLanguage.deleteNextFrames,
				function(id){ 
					var min,max = mainForm.tbFps.getProgressRange();
					var cur = mainForm.tbFps.progressPos;
					
					for(frame=cur+1;max;1){
						mainForm.plusPreview.previewTimeline[frame].deleted = true;
					} 
					
					mainForm.plusPreview.frameDeleted = true;
					mainForm.plusPosition.oncommand();
					mainForm.btnPause.oncommand();
					
					mainForm.tbFps.progressPos = cur;
					mainForm.tbFps.onPosChanged( cur,true )
				} 
			) 		
		}
		
		if(mainForm.plusPreview.frameDeleted){
			menuFile.add(
				uiLanguage.undelete,
				function(id){ 
					mainForm.plusPreview.frameDeleted = null;
					mainForm.plusPreview.origPreviewTimeline = null;
					mainForm.plusPosition.oncommand();
				} 
			) 	
		}
		menuFile.add();
	}

	var id = menuFile.add(
		(playing ? uiLanguage.pauseAndEdit : uiLanguage.play) + '\tEnter',
		function(id){
			mainForm.btnPause.oncommand();;
		} 
	)
	if( totalFrames <= 1 ) menuFile.enable(id,false,0/*_MF_BYCOMMAND*/);	
	
	menuFile.popup(x,y);
}

mainForm.plusPreview.loadPreviewByBuffer = function(buf){
	var bmp = gdip.bitmap(buf);
	if(!bmp){
		return false;
	}
	
	if(bmp.width * (mainForm.plusPreview.dpiScaleX:1) < mainForm.plusPreview.width 
		&& bmp.height * (mainForm.plusPreview.dpiScaleY:1) < mainForm.plusPreview.height){
		mainForm.plusPreview.foreRepeat = "center";
	}
	else {
		mainForm.plusPreview.foreRepeat = "scale";
	}
	
	var prev = mainForm.plusPreview.setForeground(bmp,false,true);	
	if(prev){
		prev.dispose();
	}
	
	mainForm.plusPreview.startPreview();
	return true;
}

mainForm.chkPreview.oncommand = function(id,event){
 
	if(mainForm.chkPreview.checked){
		previewPath = mainForm.getCurrentImage();
		if(!previewPath) {
			mainForm.chkPreview.checked = false;
			return;
		} 
		
		var buf = string.loadBuffer(previewPath);
		if(!mainForm.plusPreview.loadPreviewByBuffer(buf)){
			mainForm.chkPreview.checked = false;
			mainForm.msgboxErr(uiLanguage.notFound);
			return;	
		}
 
 		mainForm.btnRecord.hide = true;
 		mainForm.btnPause.hide = false;
 		mainForm.btnMenu.hide = false;
 		mainForm.btnWebSite.hide = true;
 		mainForm.btnPause.checked = false;
		mainForm.btnRecord.disabled = true;
		mainForm.btnCopy.disabled = false;
		mainForm.plusPreview.$currentImagePath = previewPath;
		
		mainForm.plusPosition.iconText = '\uF255';
		mainForm.plusPosition.text = "Size: " + math.size64(#buf).format();
		mainForm.plusPosition.show(true); 
		
		mainForm.editGifsicleArgs.text = config.setting.gifsicleArgs3;
		mainForm.editGifsicleArgs.show(true);
		
		mainForm.plusPreview.predraw();
		holePreview.enable(false);
		mainForm.disableDragFullWindow = true;
		
		var bmp = mainForm.plusPreview.getForeground();
		if(bmp.totalFrames = 1){
			mainForm.tbFps.setTrackbarRange(1,1);
			mainForm.lbFps2.text = 1;
			mainForm.btnPause.disabled = true;
		}
		else {
			mainForm.btnPause.disabled = false;
		}
		
		mainForm.chkPreview.setFocus();
		mainForm.setTimeout( 
			function(){
				mainForm.editGifsicleArgs.onFocusGot = function(){ 
					mainForm.setTimeout( 
						function(){
							mainForm.editGifsicleArgs.showInfoTip( uiLanguage.adjustNumByScrolling );
							mainForm.editGifsicleArgs.onFocusGot = null;
						},100)
				} 
			},1000
		)	
	}
	else {
		holePreview.enable(true);
		mainForm.disableDragFullWindow = false;
		mainForm.btnRecord.disabled = false;
		mainForm.btnRecord.hide = false;
 		mainForm.btnPause.hide = true;
 		mainForm.btnMenu.hide = true;
 		mainForm.btnWebSite.hide = false;
		mainForm.plusPosition.show(false);
		mainForm.editGifsicleArgs.show(false); 
		mainForm.plusPosition.iconText = "";
		
		var old = mainForm.plusPreview.setForeground(null);
		if(old){ old.dispose(); }
		
		mainForm.tbFps.disabled = false;
		mainForm.tbFps.setTrackbarRange(1,36);
		mainForm.tbFps.progressPos = config.setting.fps;
		mainForm.lbFps.text = "FPS：";
		
		mainForm.editGifsicleArgs.onFocusGot = null;
	}
}
mainForm.plusPosition.iconText = "";

mainForm.chkPreview.disabled = true;

import process;
mainForm.btnExplore.oncommand = function(id,event){
	
	var path = mainForm.getCurrentImage();
	if(!path) return;
	
	process.exploreSelect(path);
	thread.delay(500);
	mainForm.hitMin();
}

import win.clip.gif;
mainForm.btnCopy.oncommand = function(id,event){

	var path = mainForm.getCurrentImage();
	if(!path) return;
 
	win.clip.gif.write( path );
	mainForm.btnCopy.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250';text=''} 
	win.delay(200);
	mainForm.btnCopy.disabledText = null;
}

mainForm.btnWebSite.oncommand = function(id,event){
	process.openUrl("https://github.com/aardio/gif123");
}

import style;
mainForm.chkPreview.skin(style.checkbox);
mainForm.btnRecord.skin(style.record);
mainForm.btnCopy.skin(style.button);
mainForm.btnSettings.skin(style.button);
mainForm.btnWebSite.skin(style.button);
mainForm.btnExplore.skin(style.button);
mainForm.btnGifsicleHelp.skin(style.button);
mainForm.tbFps.skin(style.trackbar);
mainForm.tbFps.setTrackbarRange(1,36);
mainForm.tbFps.onPosChanged = function( pos,thumbTrack ){
	mainForm.lbFps2.text = pos;
	if(!mainForm.chkPreview.checked){
		config.setting.fps = pos;
	}
	else {
		if(thumbTrack && !owner.disabled){
			var bmp = mainForm.plusPreview.getForeground();
			if(bmp){
				bmp.selectActiveFrame(pos);
				mainForm.plusPreview.redraw();		
			} 	
		}
		 
		mainForm.lbFps.text = mainForm.plusPreview.previewTimelineStr[pos];
	}
}
mainForm.tbFps.progressPos = config.setting.fps;

mainForm.plusPreview.onMouseWheel = function(flags,delta,lParam){
    mainForm.tbFps.progressPos = mainForm.tbFps.progressPos +(delta>0?-1:1)
	mainForm.tbFps.onPosChanged(mainForm.tbFps.progressPos,true);
}

import win.ui.tooltip;
var tooltipCtrl = win.ui.tooltip(mainForm);
var setUiLanguage = function(lang){
	..table.assign(uiLanguage,lang);
	
	win.title = uiLanguage.title; 
	mainForm.text = uiLanguage.title;
	mainForm.btnRecord.text = uiLanguage.record; 
	mainForm.chkPreview.text = uiLanguage.preview;
	mainForm.btnCopy.text = uiLanguage.copy;
	mainForm.btnPause.text = uiLanguage.pause;
	
	//tooltipCtrl.addTool(mainForm.lbFps,uiLanguage.fpsTip); 
	//tooltipCtrl.addTool(mainForm.lbFps2,uiLanguage.fpsTip); 
	tooltipCtrl.addTool(mainForm.btnRecord,uiLanguage.recordTip); 
	tooltipCtrl.addTool(mainForm.btnExplore,uiLanguage.exploreTip); 
	tooltipCtrl.addTool(mainForm.btnWebSite,uiLanguage.gitTip); 
	tooltipCtrl.addTool(mainForm.chkPreview,uiLanguage.previewTip);
	tooltipCtrl.addTool(mainForm.btnCopy,uiLanguage.copyTip); 
	tooltipCtrl.addTool(mainForm.btnSettings,uiLanguage.settings);
	tooltipCtrl.addTool(mainForm.plusPosition,uiLanguage.optimizeGif); 
}

var lcid = ::Kernel32.GetUserDefaultLCID();
if( lcid==0x404/*zh-TW*/ || lcid == 0x0C04/*zh-HK*/ || lcid == 0x1404/*zh-MO*/ ){
	setUiLanguage(uiLanguage.cht);
}
elseif( lcid==0x0412/*ko-KR*/ ){
	setUiLanguage(uiLanguage.ko);
	mainForm.btnRecord.right = mainForm.btnRecord.right - 10;
	mainForm.chkPreview.left = mainForm.chkPreview.left - 10;
}
elseif( lcid==0x0411/*ja-JP*/ ){
	setUiLanguage(uiLanguage.jp);
	mainForm.btnRecord.right = mainForm.btnRecord.right - 10;
	mainForm.chkPreview.left = mainForm.chkPreview.left - 10;
	mainForm.chkPreview.right = mainForm.chkPreview.right +  15;
 	
	var x,y,cx,cy = mainForm.btnCopy.getPos();
	mainForm.btnCopy.setPos(x+20,y,cx+10,cy);
	 
	for(i,ctrl in ({mainForm.lbFps,mainForm.lbFps2,mainForm.tbFps,mainForm.btnExplore,mainForm.btnWebSite,mainForm.btnSettings,mainForm.btnMenu})){
		var x,y = ctrl.getPos()
		ctrl.setPos(x+25,y);
	} 
}
elseif( lcid!=0x804/*zh-CN*/ && lcid!=0x1004/*zh-SG*/ ){
	setUiLanguage(uiLanguage.en);
}
else {
	setUiLanguage(uiLanguage.chs);
}

mainForm.onDropFiles = function(files){
	var path = files[1];
	if(!..io.exist(path,4)) return;
	
	if(mainForm.btnRecord.recording){ 
		return mainForm.msgboxErr(uiLanguage.stopRecoding);
	}
	
	if(mainForm.chkPreview.disabled && mainForm.btnRecord.disabled ){
		return;
	}

	if(string.endWith(path,".gif",true)){
		mainForm.setCurrentPreviewImage(path);  
		mainForm.chkPreview.checked = true; 
		mainForm.chkPreview.disabled = false;
		mainForm.chkPreview.oncommand();
	}
	else{
		mainForm.setCurrentPreviewImage(null);  
		mainForm.chkPreview.checked = false; 
		mainForm.chkPreview.disabled = false;
		mainForm.chkPreview.oncommand();
		
		mainForm.btnRecord.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250';text=''}
		mainForm.chkPreview.disabled = true;
		mainForm.btnSettings.disabled = true;
		mainForm.btnCopy.disabled = true;
		mainForm.btnWebSite.disabled = true;
		mainForm.btnExplore.disabled = true;
		
		thread.invoke( 
			function(mainForm,files){
				import fsys;
				import fsys.environment;
				import soImage;
				import config;
				
				gifFile = soImage.gifFile(config.__pathRecording); 
				if(!gifFile) return mainForm.msgboxErr(uiLanguage.recodeErrMsg ++ config.__pathRecording); 
				gifFile.disposalMethod = 1; 
				
				var count = 0;
				var delay = 1000/mainForm.tbFps.progressPos; 
				for(i=1;#files;1){
					var path = files[i];
					
					if(
						string.endWith(path,".JPG",true)
						||string.endWith(path,".PNG",true)
						||string.endWith(path,".JPEG",true)
						||string.endWith(path,".JFIF",true)
						||string.endWith(path,".BMP",true)){
							
						var imgFrame = soImage();
						imgFrame.load(path);
						
						if(imgFrame.isValid()){
							imgFrame.decreaseBpp(8,256,8);
    						gifFile.write(imgFrame,true,delay/10);
    						count++;	
						}
					}	
				
				}
				
				gifFile.close(); 
				
				if(count>0){
					var outputFilename = config.setting.outputFilename;
					if(string.indexOf(outputFilename,"%")){
						outputFilename = tostring(time(),outputFilename)
					}
					
					config.setting.pathOutput = io.joinpath( fsys.environment.expand(config.setting.outputDir),outputFilename);
					fsys.copy(config.__pathRecording,config.setting.pathOutput);
					
					mainForm.setCurrentPreviewImage(config.setting.pathOutput);  
					io.remove(config.__pathRecording);
					
					mainForm.chkPreview.checked = true; 
					mainForm.chkPreview.disabled = false;
					mainForm.chkPreview.oncommand();
				}
				else {
					mainForm.msgboxErr("Invalid picture format!")
				}
				
				mainForm.btnExplore.disabled = false;	
				mainForm.btnCopy.disabled = false;
				mainForm.btnWebSite.disabled = false;
				mainForm.chkPreview.disabled = false;
				mainForm.btnSettings.disabled = false;
				mainForm.btnRecord.disabledText = null;
				mainForm.btnRecord.disabled = true;
			},mainForm,files
		)

	}
}

mainForm.onEnterSizeMove = function(){
	if(!mainForm.chkPreview.checked){
		mainForm.sizingForRecorder = 1;
	} 
}

import win.ui.simpleWindow;
var wndFrame = win.ui.simpleWindow(mainForm);

mainForm.onExitSizeMove = function(){
	if(!mainForm.sizingForRecorder) {
		return;
	}
	mainForm.sizingForRecorder = false; 
	
	mainForm.btnRecord.show(true);
	mainForm.plusPosition.show(false);
	wndFrame.titlebarMin.show(true);
    wndFrame.titlebarMax.show(true);
    wndFrame.titlebarClose.show(true);
    mainForm.adjust();
} 

mainForm.wndproc = {
	[ 0x0214/*_WM_SIZING*/ ] = function(){ 
		if(!mainForm.sizingForRecorder) return;
		
		if(mainForm.sizingForRecorder = 1){
			mainForm.sizingForRecorder = 2;
    		mainForm.plusPosition.show(true);
    		mainForm.btnRecord.show(false);
    		mainForm.chkPreview.show(false);
    		mainForm.btnCopy.show(false);
    		mainForm.lbFps.show(false);
    		mainForm.lbFps2.show(false);
    		mainForm.tbFps.show(false);
    		mainForm.btnExplore.show(false);
    		mainForm.btnSettings.show(false);
    		mainForm.btnWebSite.show(false);
    		wndFrame.titlebarMin.show(false);
    		wndFrame.titlebarMax.show(false);
    		wndFrame.titlebarClose.show(false);
		}
		
		var x,y,cx,cy = mainForm.plusPreview.getPos();
		mainForm.plusPosition.text = uiLanguage.size +": " + cx + " x " + cy;
	}
}

mainForm.btnSettings.oncommand = function(id,event){
	var frmChild = mainForm.loadForm("\dlg\setting\setting.aardio");
	frmChild.doModal();
}

mainForm.plusPosition.orphanWindow();
mainForm.disableDragFullWindow = false;

mainForm.plusPosition.skin( {
		background={
			default=0xFF77B200;
			disabled=0xFFCCCCCC;
			hover=0xFF6600B3
		};
		color={
			default=0xFF000000;
			disabled=0xFF6D6D6D
		}
	} )

mainForm.plusPosition.oncommand = function(id,event){
	var outPath = mainForm.getCurrentImage();
	if(!outPath) return;
	
	var inPath  = config.__pathUnoptimizedPreview; 
	
	var gifsicleArgs = mainForm.editGifsicleArgs.text;
	if(string.indexOf(gifsicleArgs,"--help") || string.indexOf(gifsicleArgs,"?")){
		import process;
		process.openUrl("https://www.lcdf.org/gifsicle/man.html");
		return;	
	}
	
	gifsicleArgs = string.replace(gifsicleArgs,"(\d+)--","\1 --");
	gifsicleArgs = string.replace(gifsicleArgs,"--colors(\d+)","--colors \1");
	mainForm.editGifsicleArgs.text = gifsicleArgs;
	

	mainForm.chkPreview.disabled = true;
	mainForm.plusPosition.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250';text=''} 
	
	var deletedFrameIndex = {}
	if(mainForm.plusPreview.frameDeleted){
		var origPreviewTimeline = mainForm.plusPreview.origPreviewTimeline;
		var previewTimeline = mainForm.plusPreview.previewTimeline;
		
		var origFrame,frame;
		var undeletedTimeline = 0;
		var pos = 0;
		
		for(origIndex=1;#origPreviewTimeline;1){
			origFrame = origPreviewTimeline[origIndex];
			if(origFrame.deleted) {
				table.push(deletedFrameIndex,origIndex);
				continue;
			}
			
			var undeletedTimelineBegin = undeletedTimeline;
			undeletedTimeline = undeletedTimeline + (origFrame.e - origFrame.b)//200
			for(i=pos+1;#previewTimeline;1){
				frame = previewTimeline[i];
				if(frame.b>=undeletedTimeline) break;
				
				if(frame.b<=undeletedTimelineBegin && frame.e>=undeletedTimeline){
					if(frame.deleted){
						table.push(deletedFrameIndex,origIndex);
						origFrame.deleted = true;
					}
				}
				pos = i;
			}
		}
		
	}
	
	
	var ret = thread.invokeAndWait(
		function(inPath,outPath,gifsicleArgs,deletedTimeline){
		
			import process.gifsicle;
			gifsicleArgs = string.replace(gifsicleArgs,"--colors\s+0!\D","");
			
			var deletedIndex;
			if(deletedTimeline){ 
				import gdip.bitmap;
				var bmpIn = gdip.bitmap(inPath);
				var inDelays = bmpIn.getFrameDelays();
				bmpIn.dispose();
				
				deletedIndex = {}
				var timeline = 0;
				var pos = 0;
			
				for(i=1;#deletedTimeline;1){
					frame = deletedTimeline[i];
					
					for(origIndex=pos+1;#inDelays;1){
						var b,e = timeline,timeline + inDelays[origIndex];
						if(b>=frame.e) break;
						
						pos = origIndex;
						timeline = e;
						
						if(frame.b<=b && frame.e>=e){
							if(frame.deleted){
								table.push(deletedIndex,origIndex); 
							}
						}
					}
				}
				
				var del = " --delete"
				for(i=#deletedIndex;1;-1){
					del = del + "  #" + (deletedIndex[i]-1);
				}
				
				gifsicleArgs = del + " " + gifsicleArgs; 
			}

			return process.gifsicle.get(inPath,outPath,gifsicleArgs);
		} ,inPath,outPath,gifsicleArgs,mainForm.plusPreview.frameDeleted?mainForm.plusPreview.origPreviewTimeline
	); 
	
	mainForm.plusPosition.disabledText = null;	
	mainForm.chkPreview.disabled = false;

	var buf = string.loadBuffer(outPath);
	if(#buf){
		mainForm.plusPreview.loadPreviewByBuffer(buf);
		mainForm.plusPosition.text = "Size: " + math.size64(#buf).format();
	} 
	
	if(#ret){
		mainForm.editGifsicleArgs.onFocusGot = null;
		
		mainForm.editGifsicleArgs.setFocus();
		if(string.find(ret,"\:\s*warning\:")){
			mainForm.editGifsicleArgs.showWarningTip(uiLanguage.adjustNumByScrolling +'\r\n\r\n' + ret);
		}
		else {
			mainForm.editGifsicleArgs.showErrorTip(uiLanguage.adjustNumByScrolling +'\r\n\r\n' + ret);
		}
	}
}

mainForm.plusPreview.deleteFrames = function(frameDeleted){
	var outPath = mainForm.getCurrentImage();
	if(!outPath) return;
	
	mainForm.chkPreview.disabled = true;
	mainForm.plusPosition.disabled = true;
	mainForm.plusPreview.disabledText = {'\uF254';'\uF251';'\uF252';'\uF253';'\uF250'}
	
	var ret = thread.invokeAndWait(
		function(outPath,frameDeleted){
			import process.gifsicle;
			var delArgs = " --delete"
			for(i=#frameDeleted;1;-1){
				delArgs = delArgs + "  #" + (frameDeleted[i]-1);
			}
			 
	 		return process.gifsicle.get(outPath,,delArgs);
		} ,outPath,frameDeleted
	);
	io.print(ret);
	
	var buf = string.loadBuffer(outPath);
	if(#buf){
		mainForm.plusPreview.loadPreviewByBuffer(buf);
		mainForm.plusPosition.text = "Size: " + math.size64(#buf).format();
	} 
	
	mainForm.plusPreview.disabledText = null;
	mainForm.chkPreview.disabled = false;
	mainForm.plusPosition.disabled = false;	
}
mainForm.editGifsicleArgs.orphanWindow();

import win.ui.accelerator;
var accelerator = win.ui.accelerator({
    { 
        ctrl = true; shift = true; alt = true; vkey = 'Z'#;  
        oncommand = function() {
        	mainForm.btnRecord.oncommand();
        }
    };  
    { 
        ctrl = true; vkey = 'Z'#;  
        oncommand = function() {
            if(!mainForm.chkPreview.checked){
            	mainForm.btnRecord.oncommand();
            }
            else {
            	mainForm.chkPreview.checked = false;
            	mainForm.chkPreview.oncommand()
            }
            
        }
    }; 
    { 
        ctrl = true; vkey = 'C'#;  
        oncommand = function() {
        	mainForm.btnCopy.oncommand()
        }
    };   
    { 
        ctrl = true; vkey = 'P'#;  
        oncommand = function() {
            if(!mainForm.chkPreview.disabled){
            	mainForm.chkPreview.checked = !mainForm.chkPreview.checked;
            	mainForm.chkPreview.oncommand()
            } 
        }
    }; 
    { 
        vkey = 0x21/*_VK_PGUP*/;  
        oncommand = function() {
            var pos = mainForm.tbFps.progressPos - 1
        	mainForm.tbFps.progressPos = pos;
        	if(mainForm.tbFps.progressPos == pos){
        		mainForm.tbFps.onPosChanged( pos,true )
        	}
        }
    };  
    { 
        vkey = 0x22/*_VK_PGDN*/;  
        oncommand = function() {
            var pos = mainForm.tbFps.progressPos + 1
        	mainForm.tbFps.progressPos = pos;
        	if(mainForm.tbFps.progressPos == pos){
        		mainForm.tbFps.onPosChanged( pos,true )
        	}
        }
    };  
},mainForm );

subscribe("spellingHotkeyChange",function(...){
	if(#config.setting.recordHotkey){
		if(mainForm.hkRecordId){
			mainForm.unreghotkey(mainForm.hkRecordId)
			mainForm.hkRecordId = null;
		}
		
		mainForm.hkRecordId = mainForm.reghotkey( function(id,mod,vk){ 
        	if(win.isIconic(mainForm.hwnd) && (!mainForm.btnRecord.recording)){
            	import mouse.screenArea;
            	var area = mouse.screenArea(mainForm);
            	if(!area) return;
            	
            	area.onSelectionChanged = function(rc){
            		
            		owner.close();
            		mainForm.show(9/*_SW_RESTORE*/);
            		if( mainForm.chkPreview.checked ){
            			mainForm.chkPreview.checked = false;
            			mainForm.chkPreview.oncommand();
            		}
            		
            		var x,y,cx,cy = mainForm.plusPreview.getPos();
            		var x2,y2,cx2,cy2 = mainForm.getPos();
            		
            		mainForm.setPos(rc.left-x,rc.top-y
            			,math.max(rc.width()+(cx2-cx),201),math.max(rc.height()+(cy2-cy),71));
        			win.setTopmost(mainForm.hwnd,true); 
            	}
            	
            	win.setTopmost(mainForm.hwnd,true);
        		area.doModal();
        	}
        	else {
        	    win.setTopmost(mainForm.hwnd,true);
        	    if( mainForm.chkPreview.checked ){
            		mainForm.chkPreview.checked = false;
            		mainForm.chkPreview.oncommand();
            	}
            	
        		mainForm.btnRecord.oncommand(); 
        	}
		},config.setting.recordHotkey[1],config.setting.recordHotkey[2])    	
	}
} )
publish("spellingHotkeyChange");

mainForm.onDestroy = function(){
    recorder.stop();
}

mainForm.editGifsicleArgs.wndproc = function(hwnd,message,wParam,lParam){
	if(message == 0x101/*_WM_KEYUP*/){
		if(wParam==0xD/*_VK_RETURN*/){
			mainForm.plusPosition.oncommand();
		}
	} 
	else if(message==0x20A/*_WM_MOUSEWHEEL*/){
		var delta = wParam >> 16; 
		var b,e = mainForm.editGifsicleArgs.getsel();
		var text = mainForm.editGifsicleArgs.text; 
		
		var left = string.match(string.slice(text,1,(e===null) ? (b<3?3:b): (e<3:3:e)),"()([a-z][^\d\s=]*)[\d\s=]*$"); 
		if(!left) return;
		
		var text = string.slice(mainForm.editGifsicleArgs.text,left) ;
		text = string.replace(text,"^([a-z]+)(\D+)(\d+)"
			,function(tag,sep,value){
				value = tonumber(value,10);
				if(tag=="colors"){
					if(delta>0){
						if(value<2)value = 2;
						elseif(value<4)value = 4;
						elseif(value<8)value = 8;
						elseif(value<16)value = 16;
						elseif(value<32)value = 32;
						elseif(value<64)value = 64;
						elseif(value<128)value = 128;
						elseif(value<256)value = 256;
					}
					else {
						if(value>=256)value = 128;
						elseif(value>=128)value = 64;
						elseif(value>=64)value = 32;
						elseif(value>=32)value = 16;
						elseif(value>=16)value = 8;
						elseif(value>=8)value = 4;
						elseif(value>=4)value = 2;
						elseif(value>=2)value = 0;
					}  
				}
				elseif(tag=="lossy"){
					if(delta>0){
						value = value + 10;
						if(value>100) value = 100;
					}
					else {
						value = value - 10;
						if(value<=0) value = 0;
					}  
				}  
				elseif(tag=="optimize"){
					if(delta>0){
						if(value<1)value = 1;
						elseif(value<2)value = 2;
						elseif(value<3)value = 3; 
					}
					else {
						if(value>=3)value = 2;
						elseif(value>=2)value = 1;
						elseif(value>=1)value = 0;
					}  
				} 
				
				return tag ++ sep ++ tostring(value);
			},1)
		
		mainForm.editGifsicleArgs.text = string.slice(mainForm.editGifsicleArgs.text,1,left-1) ++ text;	
		mainForm.editGifsicleArgs.setsel(b,e); 
	}
}

mainForm.btnGifsicleHelp.setParent(mainForm.editGifsicleArgs)
mainForm.btnGifsicleHelp.oncommand = function(id,event){
	import process;
	process.openUrl("https://gif123.aardio.com/#gifsicle");
}

import win.ui.minmax;
win.ui.minmax(mainForm,201,71);

mainForm.preadjust = function( cx,cy,wParam ) {	 
	var dpiScaleX = mainForm.dpiScaleX; 
	if(mainForm.sizingForRecorder) return;
	
	mainForm.btnSettings.hide = cx/dpiScaleX<605;
	mainForm.btnExplore.hide = cx/dpiScaleX<580; 
	mainForm.lbFps2.hide = cx/dpiScaleX<550;
	mainForm.tbFps.hide = cx/dpiScaleX<519;
	mainForm.lbFps.hide = cx/dpiScaleX<519;
	mainForm.btnCopy.hide = cx/dpiScaleX<360;
	mainForm.chkPreview.hide = cx/dpiScaleX<300;
	
	if(mainForm.chkPreview.checked){
		mainForm.btnMenu.hide = cx/dpiScaleX<630; 
	}
	else {
		mainForm.btnWebSite.hide = cx/dpiScaleX<630; 
	}
	
	
	if(mainForm.chkPreview.checked){
		var bmp = mainForm.plusPreview.getForeground();
		if(bmp){ 
			if(bmp.width * (mainForm.plusPreview.dpiScaleX:1) < mainForm.plusPreview.width 
				&& bmp.height* (mainForm.plusPreview.dpiScaleY:1)  < mainForm.plusPreview.height){
				mainForm.plusPreview.foreRepeat = "center";
			}
			else {
				mainForm.plusPreview.foreRepeat = "scale";
			}
		}		
	}
};

mainForm.onOk = function(){
    if(mainForm.chkPreview.checked){
        mainForm.btnPause.checked = !mainForm.btnPause.checked;
    	mainForm.btnPause.oncommand();
    }
}

mainForm.btnPause.skin(style.pause)
mainForm.btnPause.oncommand = function(id,event){
	if(mainForm.chkPreview.disabled ) return;
	
    var bmp = mainForm.plusPreview.getForeground();
	if(bmp.stopAnimation()) {
		mainForm.tbFps.disabled = false;
		mainForm.btnPause.checked = true;
		mainForm.btnPause.text = uiLanguage.play;
		return;
	}
	else {
		mainForm.tbFps.disabled = true;
		mainForm.btnPause.checked = false;
		mainForm.btnPause.text = uiLanguage.pause;
	}
	
	mainForm.plusPreview.startPreview();
}

mainForm.btnMenu.skin(style.button)
mainForm.btnMenu.oncommand = function(id,event){
	var x,y,cx,cy = owner.getPos();
	mainForm.plusPreview.showContextMenu(x,y+cy);
}

mainForm.show();
win.setTopmost(mainForm.hwnd,true);
win.loopMessage();